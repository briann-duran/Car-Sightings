version: "3.8"

services:

  #1. Python_Images
  images:
    build:
      context: ./python_images
      dockerfile: Dockerfile_python_images
    ports:
      - "5000:5000"
    environment:
      - UPLOAD_FOLDER=/app/uploads
    volumes:
      - ./python_images/uploads:/app/uploads

  #2. Java_Sighting
  sightings:
    build:
      context: ./java_sighting
      dockerfile: Dockerfile_java_sighting
    ports:
      - "8082:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/databaseName
      - SPRING_DATASOURCE_USERNAME=the_username
      - SPRING_DATASOURCE_PASSWORD=the_password
    depends_on:
      - db

  #3. Postgres
  db:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_DB: databaseName
      POSTGRES_USER: the_username
      POSTGRES_PASSWORD: the_password
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  #4. Node_Cars
  cars:
    build:
      context: ./node_cars  # Ruta donde se encuentra tu Dockerfile
      dockerfile: Dockerfile_node_cars
    ports:
      - "3000:3000"  # Exponer el puerto 3000
    environment:
      - MONGO_URI=mongodb://mongo:27017/mydatabase  # Ajusta el URI según tu configuración
    depends_on:
      - mongo  # Asegúrate de que el servicio de MongoDB esté en funcionamiento antes de iniciar

  #5. Mongo
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db  # Para persistir los datos de MongoDB

  #6. Nginx
  nginx:
    build:
      context: ./nginx  # Ruta donde se encuentra tu Dockerfile
      dockerfile: Dockerfile_nginx
    ports:
      - "8081:80"  # Cambia el puerto 80 externo a 8081
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - images
      - sightings
      - cars

  # Se persistiran los datos de Posgres y Mongo
volumes:
  db_data:
  mongo_data:

  #Networks: Por defecto compose entiende que los contenedores interactuan dentro de la misma red.